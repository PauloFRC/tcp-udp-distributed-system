// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SensorReading {
    #[prost(string, tag = "1")]
    pub sensor_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub location: ::prost::alloc::string::String,
    #[prost(enumeration = "DeviceType", tag = "3")]
    pub sensor_type: i32,
    #[prost(double, tag = "4")]
    pub value: f64,
    #[prost(string, tag = "5")]
    pub unit: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
    #[prost(map = "string, string", tag = "7")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GatewayAnnouncement {
    #[prost(string, tag = "1")]
    pub gateway_ip: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub tcp_port: u32,
    #[prost(uint32, tag = "3")]
    pub udp_port: u32,
    #[prost(uint32, tag = "4")]
    pub command_port: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceCommand {
    #[prost(string, tag = "1")]
    pub target_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub command: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeviceType {
    Unknown = 0,
    Temperature = 1,
    Humidity = 2,
    Alarm = 3,
    LampPost = 4,
    Semaphore = 5,
}
impl DeviceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DeviceType::Unknown => "UNKNOWN",
            DeviceType::Temperature => "TEMPERATURE",
            DeviceType::Humidity => "HUMIDITY",
            DeviceType::Alarm => "ALARM",
            DeviceType::LampPost => "LAMP_POST",
            DeviceType::Semaphore => "SEMAPHORE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "TEMPERATURE" => Some(Self::Temperature),
            "HUMIDITY" => Some(Self::Humidity),
            "ALARM" => Some(Self::Alarm),
            "LAMP_POST" => Some(Self::LampPost),
            "SEMAPHORE" => Some(Self::Semaphore),
            _ => None,
        }
    }
}
